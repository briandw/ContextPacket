{"id": "7bfce648_c0", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 0, "text": "6010:2023 Jens Gustedt INRIA \u2013 Camus ICube \u2013 ICPS Universit\u00e9 de Strasbourg joint work with Peter Sewell, Kay", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:16:48"}
{"id": "7bfce648_c1", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 1, "text": "van Memarian, Victor B. F. Gomes, Martin Uecker ISO/IEC JTC 1/SC 22/WG14 N", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:48:80"}
{"id": "7bfce648_c2", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 2, "text": "3057 https://open-std.org/JTC1/SC22/WG14/www/docs/3057.pdf https://modernc.gforge.inria.fr", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:80:112"}
{"id": "7bfce648_c3", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 3, "text": "/ Jens Gustedt (INRIA) A Provenance-aware memory object model for C February 8, 2023 1 / 20 Mot", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:112:144"}
{"id": "7bfce648_c4", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 4, "text": "ivation Table of Contents 1 Motivation 2 Provenance based aliasing analysis 3 Standardization Jens Gustedt (INRIA) A Proven", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:144:176"}
{"id": "7bfce648_c5", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 5, "text": "ance-aware memory object model for C February 8, 2023 2 / 20 Motivation The C programming language ISO/IEC IS 989", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:176:208"}
{"id": "7bfce648_c6", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 6, "text": "9:2018 Features good: standardized, portable, stable, simple, efficient, extensible bad: safety, out-of-bounds access, lack of encaps", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:208:240"}
{"id": "7bfce648_c7", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 7, "text": "ulation, pointer casts, lack of composability, side channels One of the major programming languages C is the base and interface for all modern processor architectures 16 bit", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:240:272"}
{"id": "7bfce648_c8", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 8, "text": " microprocessor (10 \u00a2) . . . 128 bit multi-core high performance processor many other programming languages Jens Gustedt (INRIA) A Pro", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:272:304"}
{"id": "7bfce648_c9", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 9, "text": "venance-aware memory object model for C February 8, 2023 3 / 20 Motivation C is highly optimizable \"As-if\" rule", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:304:336"}
{"id": "7bfce648_c10", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 10, "text": " The compiled code only performs visible effects. How the compiler achieves that is their business/secret. Internal rewriting into more efficient code with equivalent semantics. Storage-backed objects", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:336:368"}
{"id": "7bfce648_c11", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 11, "text": " Pointers allow access to objects from different angles/views. Many optimizations can only be applied if access is unique. Possible aliasing inhibits optimizations. Jens Gusted", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:368:400"}
{"id": "7bfce648_c12", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 12, "text": "t (INRIA) A Provenance-aware memory object model for C February 8, 2023 4 / 20 Motivation Aliasing techniques", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:400:432"}
{"id": "7bfce648_c13", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 13, "text": " in C Type-based aliasing analysis void f(int* a, float* b) { // *a and *b will never alias } restrict-based aliasing", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:432:464"}
{"id": "7bfce648_c14", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 14, "text": " analysis void g(float*restrict a, float*restrict b) { // *a and *b will never alias } interdiction based aliasing prevention //", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:464:496"}
{"id": "7bfce648_c15", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 15, "text": " address of toto may never be taken register double toto = 35.4; Jens Gustedt (INRIA) A Provenance-aware memory", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:496:528"}
{"id": "7bfce648_c16", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 16, "text": " object model for C February 8, 2023 5 / 20 Motivation How to avoid aliasing for out-of-bounds accesses? Basic example", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:528:560"}
{"id": "7bfce648_c17", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 17, "text": " signed int y = 2, x = 1; int main() { signed int* p = &x + 1; // one beyond storage signed", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:560:592"}
{"id": "7bfce648_c18", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 18, "text": " int* q = &y; // pointers ok if (!memcmp(&p, &q, sizeof(p))) { // exposure! *p = 11;", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:592:624"}
{"id": "7bfce648_c19", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 19, "text": " // formed from x, accessing y? } } Question How to complement C\u2019s memory model such that the access to *p is forbidden? How to build tools", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:624:656"}
{"id": "7bfce648_c20", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 20, "text": " that analyze such situations? Jens Gustedt (INRIA) A Provenance-aware memory object model for C February 8, 2023 6", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:656:688"}
{"id": "7bfce648_c21", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 21, "text": " / 20 Provenance based aliasing analysis Table of Contents 1 Motivation 2 Provenance based aliasing analysis 3 Standardization Jens G", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:688:720"}
{"id": "7bfce648_c22", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 22, "text": "ustedt (INRIA) A Provenance-aware memory object model for C February 8, 2023 7 / 20 Provenance based", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:720:752"}
{"id": "7bfce648_c23", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 23, "text": " aliasing analysis Definitions Storage instance A storage instance is a continuous chunk of storage with a unique ID When a declared object or compound literal is instantiated Static storage duration:", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:752:784"}
{"id": "7bfce648_c24", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 24, "text": " program startup \u0019 program termination Thread storage duration: thread startup \u0019 thread termination Automatic storage duration: scope entrance \u0019 scope exit Allocated storage duration: {", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:784:816"}
{"id": "7bfce648_c25", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 25, "text": " malloc, calloc, realloc } \u0019 { free, realloc } Recycled storage (stack or heap) \u0019 new ID Provenance Each valid pointer holds", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:816:848"}
{"id": "7bfce648_c26", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 26, "text": " an ID of the corresponding storage instance an address Jens Gustedt (INRIA) A Provenance-aware memory object model for C February 8, ", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:848:880"}
{"id": "7bfce648_c27", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 27, "text": "2023 8 / 20 Provenance based aliasing analysis Detection of conflicts A view from Cerberus y: signed int [@6, 0", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:880:912"}
{"id": "7bfce648_c28", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 28, "text": "x4c] 2 p: signed int* [@7, 0x50] @5, 0x4c q: signed int*", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:912:944"}
{"id": "7bfce648_c29", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 29, "text": " [@8, 0x58] @6, 0x4c x: signed int [@5, 0x48] 1 http://", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:944:976"}
{"id": "7bfce648_c30", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 30, "text": "cerberus.cl.cam.ac.uk/cerberus Jens Gustedt (INRIA) A Provenance-aware memory object model for C February 8", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:976:1008"}
{"id": "7bfce648_c31", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 31, "text": ", 2023 9 / 20 Provenance based aliasing analysis Exposure and synthesis Conversion between pointers and integers Bad, bad, bad! All type", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1008:1040"}
{"id": "7bfce648_c32", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 32, "text": " information is lost! All provenance information is lost! Track provenance? through integers? through representation bytes? through control flow? Jens Gustedt (IN", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1040:1072"}
{"id": "7bfce648_c33", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 33, "text": "RIA) A Provenance-aware memory object model for C February 8, 2023 10 / 20 Provenance based aliasing analysis Exposure", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1072:1104"}
{"id": "7bfce648_c34", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 34, "text": " and synthesis Terminology pointer to integer conversion: the whole storage instance is exposed integer to pointer conversion: the pointer is synthesized Similar features printf or scanf with %p", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1104:1136"}
{"id": "7bfce648_c35", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 35, "text": " byte fiddling with in-storage representation of pointers fwrite or fread of a pointer representation Jens Gustedt (INRIA) A Provenance-aware memory object", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1136:1168"}
{"id": "7bfce648_c36", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 36, "text": " model for C February 8, 2023 11 / 20 Provenance based aliasing analysis Exposure and synthesis Rule J has been exposed \u0019", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1168:1200"}
{"id": "7bfce648_c37", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 37, "text": " A pointer to J may be synthesized Interdiction If a pointer to J is synthesized and J has not been exposed: undefined behavior Jens Gustedt (IN", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1200:1232"}
{"id": "7bfce648_c38", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 38, "text": "RIA) A Provenance-aware memory object model for C February 8, 2023 12 / 20 Provenance based aliasing analysis Dis", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1232:1264"}
{"id": "7bfce648_c39", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 39, "text": "ambiguation Two provenances for a synthesized pointer A synthesized pointer p may point simultaneously to the end of exposed J and the start of exposed K |______", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1264:1296"}
{"id": "7bfce648_c40", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 40, "text": " J ______|______ K ______| ^ p Rule Only a use with either provenance J or K is allowed. Jens Gustedt (INRIA)", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1296:1328"}
{"id": "7bfce648_c41", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 41, "text": " A Provenance-aware memory object model for C February 8, 2023 13 / 20 Standardization Table of Contents 1 Motivation ", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1328:1360"}
{"id": "7bfce648_c42", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 42, "text": "2 Provenance based aliasing analysis 3 Standardization Jens Gustedt (INRIA) A Provenance-aware memory object model for C February ", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1360:1392"}
{"id": "7bfce648_c43", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 43, "text": "8, 2023 14 / 20 Standardization The full technical specification ISO/IEC TS 6010:2023 https://open-std", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1392:1424"}
{"id": "7bfce648_c44", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 44, "text": ".org/JTC1/SC22/WG14/www/docs/3057.pdf Jens Gustedt (INRIA) A Provenance-aware memory object model", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1424:1456"}
{"id": "7bfce648_c45", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 45, "text": " for C February 8, 2023 15 / 20 Standardization A first step: know your constituency What do programmers think? What do compiler implement", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1456:1488"}
{"id": "7bfce648_c46", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 46, "text": "ors think? What do experts in WG14 think? All depends! there are more diverging opinions than people opinions can be shifted with good arguments and a lot", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1488:1520"}
{"id": "7bfce648_c47", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 47, "text": " of patience everything flows, but very, very slowly Tedious community work by the Cambridge group around Peter Sewell Jens Gustedt (INRIA) A Pro", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1520:1552"}
{"id": "7bfce648_c48", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 48, "text": "venance-aware memory object model for C February 8, 2023 16 / 20 Standardization A second step: condense different strategies into sound", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1552:1584"}
{"id": "7bfce648_c49", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 49, "text": " models Questions? Which granularity for the model? (allocation, object, member?) How to deal with reallocations? How to deal with type changes? How to", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1584:1616"}
{"id": "7bfce648_c50", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 50, "text": " deal with information leakage? Method Yearlong discussions in WG14 Liaison activities with WG21 (C++) A new Memory Model Study Group (head Peter Sewell", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1616:1648"}
{"id": "7bfce648_c51", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 51, "text": ") Mathematical specifications of several models An online test tool: Cerberus Jens Gustedt (INRIA) A Provenance-aware memory object model for C", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1648:1680"}
{"id": "7bfce648_c52", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 52, "text": " February 8, 2023 17 / 20 Standardization A third step: integration and acceptance The C standard itself Some new concepts and definitions Detailed changes", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1680:1712"}
{"id": "7bfce648_c53", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 53, "text": " all over More than 100 pages impacted The community Convince implementors to obey to the \"new\" rules Tag behavior that is not conforming in open implementations", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1712:1744"}
{"id": "7bfce648_c54", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 54, "text": " as bugs Have these bugs accepted by the community WG14 Convince them of the proposed changes Partial success \u0019 propose a technical specification (TS 6010)", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1744:1776"}
{"id": "7bfce648_c55", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 55, "text": " Jens Gustedt (INRIA) A Provenance-aware memory object model for C February 8, 2023 18 / 20 Standardization", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1776:1808"}
{"id": "7bfce648_c56", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 56, "text": " A fourth step: write an ISO norm Collect all the material (weird copyright rules) A paper on executable examples A paper on the semantic specification The \"diff", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1808:1840"}
{"id": "7bfce648_c57", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 57, "text": "\" to the C standard \u0019 three annexes to the TS Write the specification itself ISO language is quite particular can, may, shall, should . . .", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1840:1872"}
{"id": "7bfce648_c58", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 58, "text": " all have very restricted use terminology sometimes fixed in other ISO documents ISO has no modern collaborative tools ISO is quite restrictive for the editorial \"style\" Jens Gustedt", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1872:1904"}
{"id": "7bfce648_c59", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 59, "text": " (INRIA) A Provenance-aware memory object model for C February 8, 2023 19 / 20 Standardization A fifth step:", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1904:1936"}
{"id": "7bfce648_c60", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 60, "text": " publish an ISO norm Navigate it through the voting process WG14 National Bodies (AFNOR, DIN, INCITS, . . . ) publish ISO Jens G", "tokens": 32, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1936:1968"}
{"id": "7bfce648_c61", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 61, "text": "NOR, DIN, INCITS, . . . ) publish ISO Jens Gustedt (INRIA) A Provenance-aware memory object model for C February 8, 2023 20 / 20", "tokens": 44, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1952:1996"}
{"id": "7bfce648_c62", "doc_id": "7bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d", "order": 62, "text": " February 8, 2023 20 / 20", "tokens": 12, "citation": "\u00a77bfce648d7cdc677886cd9c7eedf830d2f160ad1f50b8c128f14051f23f4891d:P:1984:1996"}
